# api_server.py
# –ù–æ–≤–æ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —á–∞—Å—Ç–∏ LMArena Bridge

import asyncio
import json
import logging
import os
import sys
import subprocess
import time
import uuid
import re
import threading
import random
import mimetypes
from datetime import datetime
from contextlib import asynccontextmanager

import uvicorn
import requests
from packaging.version import parse as parse_version
from fastapi import FastAPI, WebSocket, WebSocketDisconnect, Request, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import StreamingResponse, JSONResponse, Response

# --- –ò–º–ø–æ—Ä—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –º–æ–¥—É–ª–µ–π ---
from modules.file_uploader import upload_to_file_bed

# --- –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
CONFIG = {}  # –•—Ä–∞–Ω–∏—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é –∏–∑ config.jsonc
# browser_ws —Ö—Ä–∞–Ω–∏—Ç WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–∫—Ä–∏–ø—Ç–æ–º Tampermonkey.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –¥–∞–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Ç–æ–ª—å–∫–æ —Å –æ–¥–Ω–æ–π –≤–∫–ª–∞–¥–∫–æ–π –±—Ä–∞—É–∑–µ—Ä–∞.
# –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–æ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π.
browser_ws: WebSocket | None = None
# response_channels —Ö—Ä–∞–Ω–∏—Ç –æ—á–µ—Ä–µ–¥—å –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ API-–∑–∞–ø—Ä–æ—Å–∞.
# –ö–ª—é—á ‚Äî request_id, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî asyncio.Queue.
response_channels: dict[str, asyncio.Queue] = {}
last_activity_time = None  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
idle_monitor_thread = None  # –ü–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ—Å—Ç–æ—è
main_event_loop = None  # –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
# –ù–æ–≤–æ–µ: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑-–∑–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω–æ—Å—Ç—å
IS_REFRESHING_FOR_VERIFICATION = False

# --- –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π ---
# MODEL_NAME_TO_ID_MAP —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω–∏—Ç –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã: { "model_name": {"id": "...", "type": "..."} }
MODEL_NAME_TO_ID_MAP = {}
MODEL_ENDPOINT_MAP = {}  # –ù–æ–≤–æ–µ: —Ö—Ä–∞–Ω–∏—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏ —Å–µ—Å—Å–∏–∏/—Å–æ–æ–±—â–µ–Ω–∏—è
DEFAULT_MODEL_ID = None  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–æ–¥–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: None

def load_model_endpoint_map():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π —Å –∫–æ–Ω–µ—á–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏ –∏–∑ model_endpoint_map.json."""
    global MODEL_ENDPOINT_MAP
    try:
        with open('model_endpoint_map.json', 'r', encoding='utf-8') as f:
            content = f.read()
            # –†–∞–∑—Ä–µ—à–∞–µ—Ç –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
            if not content.strip():
                MODEL_ENDPOINT_MAP = {}
            else:
                MODEL_ENDPOINT_MAP = json.loads(content)
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(MODEL_ENDPOINT_MAP)} —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π –º–æ–¥–µ–ª–µ–π –∏–∑ 'model_endpoint_map.json'.")
    except FileNotFoundError:
        logger.warning("–§–∞–π–ª 'model_endpoint_map.json' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—É—Å—Ç–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ.")
        MODEL_ENDPOINT_MAP = {}
    except json.JSONDecodeError as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–ª–∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å 'model_endpoint_map.json': {e}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—É—Å—Ç–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ.")
        MODEL_ENDPOINT_MAP = {}

def _parse_jsonc(jsonc_string: str) -> dict:
    """
    –ù–∞–¥—ë–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É JSONC, —É–¥–∞–ª—è—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.
    """
    lines = jsonc_string.splitlines()
    no_comments_lines = []
    in_block_comment = False
    for line in lines:
        stripped_line = line.strip()
        if in_block_comment:
            if '*/' in stripped_line:
                in_block_comment = False
                line = stripped_line.split('*/', 1)[1]
            else:
                continue
        
        if '/*' in line and not in_block_comment:
            before_comment, _, after_comment = line.partition('/*')
            if '*/' in after_comment:
                _, _, after_block = after_comment.partition('*/')
                line = before_comment + after_block
            else:
                line = before_comment
                in_block_comment = True

        if line.strip().startswith('//'):
            continue
        
        no_comments_lines.append(line)

    return json.loads("\n".join(no_comments_lines))

def load_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ config.jsonc, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ JSONC."""
    global CONFIG
    try:
        with open('config.jsonc', 'r', encoding='utf-8') as f:
            content = f.read()
        CONFIG = _parse_jsonc(content)
        logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ 'config.jsonc'.")
        # –í—ã–≤–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        logger.info(f"  - –†–µ–∂–∏–º –¢–∞–≤–µ—Ä–Ω—ã (Tavern Mode): {'‚úÖ –í–∫–ª—é—á—ë–Ω' if CONFIG.get('tavern_mode_enabled') else '‚ùå –û—Ç–∫–ª—é—á—ë–Ω'}")
        logger.info(f"  - –†–µ–∂–∏–º –æ–±—Ö–æ–¥–∞ (Bypass Mode): {'‚úÖ –í–∫–ª—é—á—ë–Ω' if CONFIG.get('bypass_enabled') else '‚ùå –û—Ç–∫–ª—é—á—ë–Ω'}")
    except (FileNotFoundError, json.JSONDecodeError) as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–ª–∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å 'config.jsonc': {e}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        CONFIG = {}

def load_model_map():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –∏–∑ models.json, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—è —Ñ–æ—Ä–º–∞—Ç 'id:type'."""
    global MODEL_NAME_TO_ID_MAP
    try:
        with open('models.json', 'r', encoding='utf-8') as f:
            raw_map = json.load(f)
            
        processed_map = {}
        for name, value in raw_map.items():
            if isinstance(value, str) and ':' in value:
                parts = value.split(':', 1)
                model_id = parts[0] if parts[0].lower() != 'null' else None
                model_type = parts[1]
                processed_map[name] = {"id": model_id, "type": model_type}
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
                processed_map[name] = {"id": value, "type": "text"}

        MODEL_NAME_TO_ID_MAP = processed_map
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ —Ä–∞–∑–æ–±—Ä–∞–Ω–æ {len(MODEL_NAME_TO_ID_MAP)} –º–æ–¥–µ–ª–µ–π –∏–∑ 'models.json'.")

    except (FileNotFoundError, json.JSONDecodeError) as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å 'models.json': {e}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π.")
        MODEL_NAME_TO_ID_MAP = {}

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π ---
def check_and_display_announcement():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ."""
    announcement_file = "announcement-lmarena.json"
    if os.path.exists(announcement_file):
        try:
            logger.info("="*60)
            logger.info("üì¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:")
            with open(announcement_file, 'r', encoding='utf-8') as f:
                announcement = json.load(f)
                title = announcement.get("title", "–û–±—ä—è–≤–ª–µ–Ω–∏–µ")
                content = announcement.get("content", [])
                
                logger.info(f"   --- {title} ---")
                for line in content:
                    logger.info(f"   {line}")
                logger.info("="*60)

        except json.JSONDecodeError:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ñ–∞–π–ª –æ–±—ä—è–≤–ª–µ–Ω–∏—è '{announcement_file}'. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
        finally:
            try:
                os.remove(announcement_file)
                logger.info(f"–§–∞–π–ª –æ–±—ä—è–≤–ª–µ–Ω–∏—è '{announcement_file}' —É–¥–∞–ª—ë–Ω.")
            except OSError as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –æ–±—ä—è–≤–ª–µ–Ω–∏—è '{announcement_file}': {e}")

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π ---
GITHUB_REPO = "Lianues/LMArenaBridge"

def download_and_extract_update(version):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏ —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É."""
    update_dir = "update_temp"
    if not os.path.exists(update_dir):
        os.makedirs(update_dir)

    try:
        zip_url = f"https://github.com/{GITHUB_REPO}/archive/refs/heads/main.zip"
        logger.info(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ —Å {zip_url}...")
        response = requests.get(zip_url, timeout=60)
        response.raise_for_status()

        # –¢—Ä–µ–±—É–µ—Ç—Å—è –∏–º–ø–æ—Ä—Ç zipfile –∏ io
        import zipfile
        import io
        with zipfile.ZipFile(io.BytesIO(response.content)) as z:
            z.extractall(update_dir)
        
        logger.info(f"–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–∞ –∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–∞ –≤ –ø–∞–ø–∫—É '{update_dir}'.")
        return True
    except requests.RequestException as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {e}")
    except zipfile.BadZipFile:
        logger.error("–°–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º –∞—Ä—Ö–∏–≤–æ–º ZIP.")
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    
    return False

def check_for_updates():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –Ω–∞ GitHub."""
    if not CONFIG.get("enable_auto_update", True):
        logger.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
        return

    current_version = CONFIG.get("version", "0.0.0")
    logger.info(f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {current_version}. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–∞ GitHub...")

    try:
        config_url = f"https://raw.githubusercontent.com/{GITHUB_REPO}/main/config.jsonc"
        response = requests.get(config_url, timeout=10)
        response.raise_for_status()

        jsonc_content = response.text
        remote_config = _parse_jsonc(jsonc_content)
        
        remote_version_str = remote_config.get("version")
        if not remote_version_str:
            logger.warning("–í —É–¥–∞–ª—ë–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥—ë–Ω –Ω–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏, –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
            return

        if parse_version(remote_version_str) > parse_version(current_version):
            logger.info("="*60)
            logger.info(f"üéâ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è! üéâ")
            logger.info(f"  - –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {current_version}")
            logger.info(f"  - –ü–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è: {remote_version_str}")
            if download_and_extract_update(remote_version_str):
                logger.info("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –∏ –∑–∞–ø—É—â–µ–Ω —Å–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
                time.sleep(5)
                update_script_path = os.path.join("modules", "update_script.py")
                # –ó–∞–ø—É—Å–∫ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å –ø–æ–º–æ—â—å—é Popen
                subprocess.Popen([sys.executable, update_script_path])
                # –ì—Ä–∞—Ü–∏–æ–∑–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
                os._exit(0)
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–∞—á–∞–π—Ç–µ –≤—Ä—É—á–Ω—É—é —Å https://github.com/{GITHUB_REPO}/releases/latest.")
            logger.info("="*60)
        else:
            logger.info("–í–∞—à–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏.")

    except requests.RequestException as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    except json.JSONDecodeError:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å —É–¥–∞–ª—ë–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")

# --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π ---
def extract_models_from_html(html_content):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π JSON-–æ–±—ä–µ–∫—Ç –º–æ–¥–µ–ª–µ–π –∏–∑ HTML-–∫–æ–Ω—Ç–µ–Ω—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–∫–æ–±–æ–∫ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏.
    """
    models = []
    model_names = set()
    
    # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π JSON-–æ–±—ä–µ–∫—Ç–æ–≤ –º–æ–¥–µ–ª–µ–π
    for start_match in re.finditer(r'\{\\"id\\":\\"[a-f0-9-]+\\"', html_content):
        start_index = start_match.start()
        
        # –ù–∞—á–∏–Ω–∞—è —Å –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–æ–∫
        open_braces = 0
        end_index = -1
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–π –ø—Ä–µ–¥–µ–ª –ø–æ–∏—Å–∫–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        search_limit = start_index + 10000  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 10000 —Å–∏–º–≤–æ–ª–æ–≤
        
        for i in range(start_index, min(len(html_content), search_limit)):
            if html_content[i] == '{':
                open_braces += 1
            elif html_content[i] == '}':
                open_braces -= 1
                if open_braces == 0:
                    end_index = i + 1
                    break
        
        if end_index != -1:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ, —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ JSON-—Å—Ç—Ä–æ–∫–∏
            json_string_escaped = html_content[start_index:end_index]
            
            # –î–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            json_string = json_string_escaped.replace('\\"', '"').replace('\\\\', '\\')
            
            try:
                model_data = json.loads(json_string)
                model_name = model_data.get('publicName')
                
                # –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø–æ publicName
                if model_name and model_name not in model_names:
                    models.append(model_data)
                    model_names.add(model_name)
            except json.JSONDecodeError as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –∏–∑–≤–ª–µ—á—ë–Ω–Ω–æ–≥–æ JSON-–æ–±—ä–µ–∫—Ç–∞: {e} - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {json_string[:150]}...")
                continue

    if models:
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ –∏ —Ä–∞–∑–æ–±—Ä–∞–Ω–æ {len(models)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.")
        return models
    else:
        logger.error("–û—à–∏–±–∫–∞: –≤ HTML-–æ—Ç–≤–µ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø–æ–ª–Ω–æ–≥–æ JSON-–æ–±—ä–µ–∫—Ç–∞ –º–æ–¥–µ–ª–∏.")
        return None

def save_available_models(new_models_list, models_path="available_models.json"):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã—Ö –ø–æ–ª–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –º–æ–¥–µ–ª–µ–π –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π JSON-—Ñ–∞–π–ª.
    """
    logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(new_models_list)} –º–æ–¥–µ–ª–µ–π, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ '{models_path}'...")
    
    try:
        with open(models_path, 'w', encoding='utf-8') as f:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –º–æ–¥–µ–ª–µ–π –≤ —Ñ–∞–π–ª
            json.dump(new_models_list, f, indent=4, ensure_ascii=False)
        logger.info(f"‚úÖ –§–∞–π–ª '{models_path}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω, —Å–æ–¥–µ—Ä–∂–∏—Ç {len(new_models_list)} –º–æ–¥–µ–ª–µ–π.")
    except IOError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª '{models_path}': {e}")

# --- –õ–æ–≥–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ ---
def restart_server():
    """–ì—Ä–∞—Ü–∏–æ–∑–Ω–æ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä."""
    logger.warning("="*60)
    logger.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–∞–π–º-–∞—É—Ç –ø—Ä–æ—Å—Ç–æ—è —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É...")
    logger.warning("="*60)
    
    # 1. (–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ) –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    async def notify_browser_refresh():
        if browser_ws:
            try:
                # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É 'reconnect', —á—Ç–æ–±—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∑–Ω–∞–ª, —á—Ç–æ —ç—Ç–æ –ø–ª–∞–Ω–æ–≤—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
                await browser_ws.send_text(json.dumps({"command": "reconnect"}, ensure_ascii=False))
                logger.info("–ö–æ–º–∞–Ω–¥–∞ 'reconnect' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –±—Ä–∞—É–∑–µ—Ä.")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É 'reconnect': {e}")
    
    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ —Å–æ–±—ã—Ç–∏–π
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º `asyncio.run_coroutine_threadsafe` –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ—Ç–æ–∫–æ–≤
    if browser_ws and browser_ws.client_state.name == 'CONNECTED' and main_event_loop:
        asyncio.run_coroutine_threadsafe(notify_browser_refresh(), main_event_loop)
    
    # 2. –ó–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ–ª–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è
    time.sleep(3)
    
    # 3. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    logger.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...")
    os.execv(sys.executable, ['python'] + sys.argv)

def idle_monitor():
    """–†–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —Å–µ—Ä–≤–µ—Ä–∞."""
    global last_activity_time
    
    # –û–∂–∏–¥–∞–µ–º, –ø–æ–∫–∞ last_activity_time –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    while last_activity_time is None:
        time.sleep(1)
        
    logger.info("–ü–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ—Å—Ç–æ—è –∑–∞–ø—É—â–µ–Ω.")
    
    while True:
        if CONFIG.get("enable_idle_restart", False):
            timeout = CONFIG.get("idle_restart_timeout_seconds", 300)
            
            # –ï—Å–ª–∏ —Ç–∞–π–º-–∞—É—Ç —Ä–∞–≤–µ–Ω -1, –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
            if timeout == -1:
                time.sleep(10)  # –°–ø–∏–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–∞–Ω—è—Ç–æ–≥–æ —Ü–∏–∫–ª–∞
                continue

            idle_time = (datetime.now() - last_activity_time).total_seconds()
            
            if idle_time > timeout:
                logger.info(f"–í—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è —Å–µ—Ä–≤–µ—Ä–∞ ({idle_time:.0f}—Å) –ø—Ä–µ–≤—ã—Å–∏–ª–æ –ø–æ—Ä–æ–≥ ({timeout}—Å).")
                restart_server()
                break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ—Ü–µ—Å—Å –±—É–¥–µ—Ç –∑–∞–º–µ–Ω—ë–Ω
                
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        time.sleep(10)

# --- –°–æ–±—ã—Ç–∏—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ FastAPI ---
@asynccontextmanager
async def lifespan(app: FastAPI):
    """–§—É–Ω–∫—Ü–∏—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º–∞—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞."""
    global idle_monitor_thread, last_activity_time, main_event_loop
    main_event_loop = asyncio.get_running_loop()  # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
    load_config()  # –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    
    # --- –í—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã ---
    mode = CONFIG.get("id_updater_last_mode", "direct_chat")
    target = CONFIG.get("id_updater_battle_target", "A")
    logger.info("="*60)
    logger.info(f"  –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {mode.upper()}")
    if mode == 'battle':
        logger.info(f"  - –¶–µ–ª—å —Ä–µ–∂–∏–º–∞ Battle: Assistant {target}")
    logger.info("  (–†–µ–∂–∏–º –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å, –∑–∞–ø—É—Å—Ç–∏–≤ id_updater.py)")
    logger.info("="*60)

    # –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Å—é—Ä–ø—Ä–∏–∑–æ–≤
    # —Ç.–∫. –æ–Ω–∏ –∏–¥—É—Ç –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π Lianues/LMArenaBridge (—Å–º —Ñ—É–Ω–∫—Ü–∏—é check_for_updates)
    # check_for_updates()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
    load_model_map()  # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π
    load_model_endpoint_map()  # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–µ—á–Ω—ã—Ö —Ç–æ—á–µ–∫ –º–æ–¥–µ–ª–µ–π
    logger.info("–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ Tampermonkey...")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ, —á—Ç–æ–±—ã –æ–Ω–æ –±—ã–ª–æ –±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω—ã–º
    check_and_display_announcement()

    # –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    last_activity_time = datetime.now()
    
    # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ—Å—Ç–æ—è
    if CONFIG.get("enable_idle_restart", False):
        idle_monitor_thread = threading.Thread(target=idle_monitor, daemon=True)
        idle_monitor_thread.start()
        
    yield
    logger.info("–°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")

app = FastAPI(lifespan=lifespan)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è CORS middleware ---
# –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏, –º–µ—Ç–æ–¥—ã –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def save_config():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–∫—Ç CONFIG –æ–±—Ä–∞—Ç–Ω–æ –≤ config.jsonc, —Å–æ—Ö—Ä–∞–Ω—è—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏."""
    try:
        # –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        with open('config.jsonc', 'r', encoding='utf-8') as f:
            lines = f.readlines()

        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–º–µ–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        def replacer(key, value, content):
            # –≠—Ç–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏—â–µ—Ç –∫–ª—é—á, –∑–∞—Ç–µ–º –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏
            pattern = re.compile(rf'("{key}"\s*:\s*").*?("?)(,?\s*)$', re.MULTILINE)
            replacement = rf'\g<1>{value}\g<2>\g<3>'
            if not pattern.search(content):  # –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ (—É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞)
                content = re.sub(r'}\s*$', f'  ,"{key}": "{value}"\n}}', content)
            else:
                content = pattern.sub(replacement, content)
            return content

        content_str = "".join(lines)
        content_str = replacer("session_id", CONFIG["session_id"], content_str)
        content_str = replacer("message_id", CONFIG["message_id"], content_str)
        
        with open('config.jsonc', 'w', encoding='utf-8') as f:
            f.write(content_str)
        logger.info("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ config.jsonc.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ config.jsonc: {e}", exc_info=True)

async def _process_openai_message(message: dict) -> dict:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è OpenAI, —Ä–∞–∑–¥–µ–ª—è—è —Ç–µ–∫—Å—Ç –∏ –≤–ª–æ–∂–µ–Ω–∏—è.
    - –†–∞–∑–±–∏—Ä–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –∏ —Å–ø–∏—Å–æ–∫ –≤–ª–æ–∂–µ–Ω–∏–π.
    - –õ–æ–≥–∏–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É chat_completions, –∑–¥–µ—Å—å —Ç–æ–ª—å–∫–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å–±–æ—Ä–∫–∞ –≤–ª–æ–∂–µ–Ω–∏–π.
    - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Å—Ç–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–æ–ª–∏ user –∑–∞–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–æ–±–µ–ª–æ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ LMArena.
    """
    content = message.get("content")
    role = message.get("role")
    attachments = []
    text_content = ""

    if isinstance(content, list):
        text_parts = []
        for part in content:
            if part.get("type") == "text":
                text_parts.append(part.get("text", ""))
            elif part.get("type") == "image_url":
                # URL –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å base64 –∏–ª–∏ http (—É–∂–µ –∑–∞–º–µ–Ω—ë–Ω –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º)
                image_url_data = part.get("image_url", {})
                url = image_url_data.get("url")
                original_filename = image_url_data.get("detail")

                try:
                    # –î–ª—è base64 –∏–∑–≤–ª–µ–∫–∞–µ–º content_type
                    if url.startswith("data:"):
                        content_type = url.split(';')[0].split(':')[1]
                    else:
                        # –î–ª—è http URL –ø—ã—Ç–∞–µ–º—Å—è —É–≥–∞–¥–∞—Ç—å content_type
                        content_type = mimetypes.guess_type(url)[0] or 'application/octet-stream'

                    file_name = original_filename or f"image_{uuid.uuid4()}.{mimetypes.guess_extension(content_type).lstrip('.') or 'png'}"
                    
                    attachments.append({
                        "name": file_name,
                        "contentType": content_type,
                        "url": url
                    })

                except (AttributeError, IndexError, ValueError) as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL –≤–ª–æ–∂–µ–Ω–∏—è: {url[:100]}... –û—à–∏–±–∫–∞: {e}")

        text_content = "\n\n".join(text_parts)
    elif isinstance(content, str):
        text_content = content

    if role == "user" and not text_content.strip():
        text_content = " "

    return {
        "role": role,
        "content": text_content,
        "attachments": attachments
    }

async def convert_openai_to_lmarena_payload(openai_data: dict, session_id: str, message_id: str, mode_override: str = None, battle_target_override: str = None) -> dict:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ OpenAI –≤ —É–ø—Ä–æ—â—ë–Ω–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞ Tampermonkey, –ø—Ä–∏–º–µ–Ω—è—è —Ä–µ–∂–∏–º—ã –¢–∞–≤–µ—Ä–Ω—ã, –æ–±—Ö–æ–¥–∞ –∏ Battle.
    –î–æ–±–∞–≤–ª–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –¥–ª—è –º–æ–¥–µ–ª–∏ —Ä–µ–∂–∏–º–æ–≤ —Å–µ—Å—Å–∏–π.
    """
    # 1. –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ–ª–µ–π –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    #    - –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ä–æ–ª–∏ 'developer' –≤ 'system' –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
    #    - –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ –≤–ª–æ–∂–µ–Ω–∏–π.
    messages = openai_data.get("messages", [])
    for msg in messages:
        if msg.get("role") == "developer":
            msg["role"] = "system"
            logger.info("–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ 'developer' –≤ 'system'.")
            
    processed_messages = []
    for msg in messages:
        processed_msg = await _process_openai_message(msg.copy())
        processed_messages.append(processed_msg)

    # 2. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –¢–∞–≤–µ—Ä–Ω—ã (Tavern Mode)
    if CONFIG.get("tavern_mode_enabled"):
        system_prompts = [msg['content'] for msg in processed_messages if msg['role'] == 'system']
        other_messages = [msg for msg in processed_messages if msg['role'] != 'system']
        
        merged_system_prompt = "\n\n".join(system_prompts)
        final_messages = []
        
        if merged_system_prompt:
            # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è
            final_messages.append({"role": "system", "content": merged_system_prompt, "attachments": []})
        
        final_messages.extend(other_messages)
        processed_messages = final_messages

    # 3. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Ü–µ–ª–µ–≤–æ–π –º–æ–¥–µ–ª–∏
    model_name = openai_data.get("model", "claude-3-5-sonnet-20241022")
    model_info = MODEL_NAME_TO_ID_MAP.get(model_name, {})  # –ö–ª—é—á–µ–≤–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: model_info –≤—Å–µ–≥–¥–∞ —Å–ª–æ–≤–∞—Ä—å
    
    target_model_id = None
    if model_info:
        target_model_id = model_info.get("id")
    else:
        logger.warning(f"–ú–æ–¥–µ–ª—å '{model_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ 'models.json'. –ó–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–µ–∑ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –º–æ–¥–µ–ª–∏.")

    if not target_model_id:
        logger.warning(f"–î–ª—è –º–æ–¥–µ–ª–∏ '{model_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤ 'models.json'. –ó–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–µ–∑ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –º–æ–¥–µ–ª–∏.")

    # 4. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    message_templates = []
    for msg in processed_messages:
        message_templates.append({
            "role": msg["role"],
            "content": msg.get("content", ""),
            "attachments": msg.get("attachments", [])
        })
    
    # 4.5. –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–¥–µ—Ä–∂–∏—Ç --bypass –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Å–æ–∑–¥–∞—ë–º —Ñ–∞–ª—å—à–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    if message_templates and message_templates[-1]["role"] == "user":
        last_msg = message_templates[-1]
        if last_msg["content"].strip().endswith("--bypass") and last_msg.get("attachments"):
            has_images = False
            for attachment in last_msg.get("attachments", []):
                if attachment.get("contentType", "").startswith("image/"):
                    has_images = True
                    break
            
            if has_images:
                logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω –º–∞—Ä–∫–µ—Ä --bypass –∏ –≤–ª–æ–∂–µ–Ω–∏—è-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–ª—å—à–∏–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")
                
                # –£–¥–∞–ª—è–µ–º –º–∞—Ä–∫–µ—Ä --bypass –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                last_msg["content"] = last_msg["content"].strip()[:-9].strip()
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∞–ª—å—à–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                fake_assistant_msg = {
                    "role": "assistant",
                    "content": "",  # –ü—É—Å—Ç–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                    "attachments": last_msg.get("attachments", []).copy()  # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                }
                
                # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–ª–æ–∂–µ–Ω–∏–π –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                last_msg["attachments"] = []
                
                # –í—Å—Ç–∞–≤–ª—è–µ–º —Ñ–∞–ª—å—à–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                message_templates.insert(len(message_templates)-1, fake_assistant_msg)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–ª—å—à–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—á–∞–ª–æ
                if message_templates[0]["role"] == "assistant":
                    logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ, —á—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Ñ–∞–ª—å—à–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
                    fake_user_msg = {
                        "role": "user",
                        "content": "Hi",
                        "attachments": []
                    }
                    message_templates.insert(0, fake_user_msg)

    # 5. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ–±—Ö–æ–¥–∞ (Bypass Mode) ‚Äî –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π
    model_type = model_info.get("type", "text")
    if CONFIG.get("bypass_enabled") and model_type == "text":
        # –†–µ–∂–∏–º –æ–±—Ö–æ–¥–∞ –≤—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–∑–∏—Ü–∏–µ–π 'a'
        logger.info("–†–µ–∂–∏–º –æ–±—Ö–æ–¥–∞ –≤–∫–ª—é—á—ë–Ω, –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        message_templates.append({"role": "user", "content": " ", "participantPosition": "a", "attachments": []})

    # 6. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (Participant Position)
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π —Ä–µ–∂–∏–º, –∏–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    mode = mode_override or CONFIG.get("id_updater_last_mode", "direct_chat")
    target_participant = battle_target_override or CONFIG.get("id_updater_battle_target", "A")
    target_participant = target_participant.lower()  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã

    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–∑–∏—Ü–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–µ–∂–∏–º–æ–º '{mode}' (—Ü–µ–ª—å: {target_participant if mode == 'battle' else 'N/A'})...")

    for msg in message_templates:
        if msg['role'] == 'system':
            if mode == 'battle':
                # –†–µ–∂–∏–º Battle: —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ç–æ–π –∂–µ —Å—Ç–æ—Ä–æ–Ω–µ, —á—Ç–æ –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç (A ‚Äî a, B ‚Äî b)
                msg['participantPosition'] = target_participant
            else:
                # –†–µ–∂–∏–º DirectChat: —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ 'b'
                msg['participantPosition'] = 'b'
        elif mode == 'battle':
            # –í —Ä–µ–∂–∏–º–µ Battle –Ω–µ—Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—é—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ü–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
            msg['participantPosition'] = target_participant
        else:  # –†–µ–∂–∏–º DirectChat
            # –í —Ä–µ–∂–∏–º–µ DirectChat –Ω–µ—Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—é—Ç 'a' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            msg['participantPosition'] = 'a'

    return {
        "message_templates": message_templates,
        "target_model_id": target_model_id,
        "session_id": session_id,
        "message_id": message_id
    }

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è OpenAI (–æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –Ω–∞–¥—ë–∂–Ω—É—é JSON-—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é) ---
def format_openai_chunk(content: str, model: str, request_id: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤ –ø–æ—Ç–æ–∫–æ–≤—ã–π –±–ª–æ–∫ OpenAI."""
    chunk = {
        "id": request_id, "object": "chat.completion.chunk",
        "created": int(time.time()), "model": model,
        "choices": [{"index": 0, "delta": {"content": content}, "finish_reason": None}]
    }
    return f"data: {json.dumps(chunk, ensure_ascii=False)}\n\n"

def format_openai_finish_chunk(model: str, request_id: str, reason: str = 'stop') -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤ –∑–∞–≤–µ—Ä—à–∞—é—â–∏–π –±–ª–æ–∫ OpenAI."""
    chunk = {
        "id": request_id, "object": "chat.completion.chunk",
        "created": int(time.time()), "model": model,
        "choices": [{"index": 0, "delta": {}, "finish_reason": reason}]
    }
    return f"data: {json.dumps(chunk, ensure_ascii=False)}\n\ndata: [DONE]\n\n"

def format_openai_error_chunk(error_message: str, model: str, request_id: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤ –±–ª–æ–∫ –æ—à–∏–±–∫–∏ OpenAI."""
    content = f"\n\n[LMArena Bridge Error]: {error_message}"
    return format_openai_chunk(content, model, request_id)

def format_openai_non_stream_response(content: str, model: str, request_id: str, reason: str = 'stop') -> dict:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ OpenAI –¥–ª—è –Ω–µ–ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞."""
    return {
        "id": request_id,
        "object": "chat.completion",
        "created": int(time.time()),
        "model": model,
        "choices": [{
            "index": 0,
            "message": {"role": "assistant", "content": content},
            "finish_reason": reason,
        }],
        "usage": {
            "prompt_tokens": 0,
            "completion_tokens": len(content) // 4,
            "total_tokens": len(content) // 4,
        },
    }

async def _process_lmarena_stream(request_id: str):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Ç–æ–∫ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞ –∏ –≤—ã–¥–∞—ë—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è.
    –¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π: ('content', str), ('finish', str), ('error', str)
    """
    global IS_REFRESHING_FOR_VERIFICATION
    queue = response_channels.get(request_id)
    if not queue:
        logger.error(f"PROCESSOR [ID: {request_id[:8]}]: –ù–µ –Ω–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª –æ—Ç–≤–µ—Ç–∞.")
        yield 'error', '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –∫–∞–Ω–∞–ª –æ—Ç–≤–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.'
        return

    buffer = ""
    timeout = CONFIG.get("stream_response_timeout_seconds", 360)
    text_pattern = re.compile(r'[ab]0:"((?:\\.|[^"\\])*)"')
    # –ù–æ–≤–æ–µ: —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    image_pattern = re.compile(r'[ab]2:(\[.*?\])')
    finish_pattern = re.compile(r'[ab]d:(\{.*?"finishReason".*?\})')
    error_pattern = re.compile(r'(\{\s*"error".*?\})', re.DOTALL)
    cloudflare_patterns = [r'<title>Just a moment...</title>', r'Enable JavaScript and cookies to continue']
    
    has_yielded_content = False  # –û—Ç–º–µ—á–∞–µ–º, –±—ã–ª –ª–∏ –≤—ã–¥–∞–Ω –≤–∞–ª–∏–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç

    try:
        while True:
            try:
                raw_data = await asyncio.wait_for(queue.get(), timeout=timeout)
            except asyncio.TimeoutError:
                logger.warning(f"PROCESSOR [ID: {request_id[:8]}]: –¢–∞–π–º-–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–∞ ({timeout} —Å–µ–∫—É–Ω–¥).")
                yield 'error', f'–û—Ç–≤–µ—Ç –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è ({timeout} —Å–µ–∫—É–Ω–¥).'
                return

            # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Cloudflare –Ω–∞ —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω–æ—Å—Ç—å ---
            def handle_cloudflare_verification():
                global IS_REFRESHING_FOR_VERIFICATION
                if not IS_REFRESHING_FOR_VERIFICATION:
                    logger.warning(f"PROCESSOR [ID: {request_id[:8]}]: –ü–µ—Ä–≤–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω–æ—Å—Ç—å, –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
                    IS_REFRESHING_FOR_VERIFICATION = True
                    if browser_ws:
                        asyncio.create_task(browser_ws.send_text(json.dumps({"command": "refresh"}, ensure_ascii=False)))
                    return "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω–æ—Å—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ."
                else:
                    logger.info(f"PROCESSOR [ID: {request_id[:8]}]: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω–æ—Å—Ç—å, –Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –æ–∂–∏–¥–∞–Ω–∏–µ.")
                    return "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω–æ—Å—Ç—å..."

            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä—è–º—ã—Ö –æ—à–∏–±–æ–∫ –æ—Ç WebSocket
            if isinstance(raw_data, dict) and 'error' in raw_data:
                error_msg = raw_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞')
                if isinstance(error_msg, str):
                    if '413' in error_msg or 'too large' in error_msg.lower():
                        friendly_error_msg = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: —Ä–∞–∑–º–µ—Ä –≤–ª–æ–∂–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ LMArena (–æ–±—ã—á–Ω–æ –æ–∫–æ–ª–æ 5 –ú–ë). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∂–∞—Ç—å —Ñ–∞–π–ª –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–Ω—å—à–∏–π."
                        logger.warning(f"PROCESSOR [ID: {request_id[:8]}]: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –≤–ª–æ–∂–µ–Ω–∏—è (413).")
                        yield 'error', friendly_error_msg
                        return
                    if any(re.search(p, error_msg, re.IGNORECASE) for p in cloudflare_patterns):
                        yield 'error', handle_cloudflare_verification()
                        return
                yield 'error', error_msg
                return

            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ [DONE]
            if raw_data == "[DONE]":
                # –õ–æ–≥–∏–∫–∞ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ websocket_endpoint, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–±—Ä–æ—Å –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                if has_yielded_content and IS_REFRESHING_FOR_VERIFICATION:
                    logger.info(f"PROCESSOR [ID: {request_id[:8]}]: –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω–æ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏.")
                break

            # 3. –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            buffer += "".join(str(item) for item in raw_data) if isinstance(raw_data, list) else raw_data

            if any(re.search(p, buffer, re.IGNORECASE) for p in cloudflare_patterns):
                yield 'error', handle_cloudflare_verification()
                return
            
            if (error_match := error_pattern.search(buffer)):
                try:
                    error_json = json.loads(error_match.group(1))
                    yield 'error', error_json.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç LMArena")
                    return
                except json.JSONDecodeError: pass

            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            while (match := text_pattern.search(buffer)):
                try:
                    text_content = json.loads(f'"{match.group(1)}"')
                    if text_content:
                        has_yielded_content = True
                        yield 'content', text_content
                except (ValueError, json.JSONDecodeError): pass
                buffer = buffer[match.end():]

            # –ù–æ–≤–æ–µ: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            while (match := image_pattern.search(buffer)):
                try:
                    image_data_list = json.loads(match.group(1))
                    if isinstance(image_data_list, list) and image_data_list:
                        image_info = image_data_list[0]
                        if image_info.get("type") == "image" and "image" in image_info:
                            # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º URL –≤ Markdown-—Ñ–æ—Ä–º–∞—Ç –∏ –≤—ã–¥–∞—ë–º –∫–∞–∫ –±–ª–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                            markdown_image = f"![Image]({image_info['image']})"
                            yield 'content', markdown_image
                except (json.JSONDecodeError, IndexError) as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}, –±—É—Ñ–µ—Ä: {buffer[:150]}")
                buffer = buffer[match.end():]

            if (finish_match := finish_pattern.search(buffer)):
                try:
                    finish_data = json.loads(finish_match.group(1))
                    yield 'finish', finish_data.get("finishReason", "stop")
                except (json.JSONDecodeError, IndexError): pass
                buffer = buffer[finish_match.end():]

    except asyncio.CancelledError:
        logger.info(f"PROCESSOR [ID: {request_id[:8]}]: –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    finally:
        if request_id in response_channels:
            del response_channels[request_id]
            logger.info(f"PROCESSOR [ID: {request_id[:8]}]: –ö–∞–Ω–∞–ª –æ—Ç–≤–µ—Ç–∞ –æ—á–∏—â–µ–Ω.")

async def stream_generator(request_id: str, model: str):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π –≤ SSE-–æ—Ç–≤–µ—Ç OpenAI."""
    response_id = f"chatcmpl-{uuid.uuid4()}"
    logger.info(f"STREAMER [ID: {request_id[:8]}]: –ü–æ—Ç–æ–∫–æ–≤—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω.")
    
    finish_reason_to_send = 'stop'  # –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    async for event_type, data in _process_lmarena_stream(request_id):
        if event_type == 'content':
            yield format_openai_chunk(data, model, response_id)
        elif event_type == 'finish':
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏—á–∏–Ω—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –Ω–æ –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ, –∂–¥—ë–º [DONE] –æ—Ç –±—Ä–∞—É–∑–µ—Ä–∞
            finish_reason_to_send = data
            if data == 'content-filter':
                warning_msg = "\n\n–û—Ç–≤–µ—Ç –ø—Ä–µ—Ä–≤–∞–Ω, –≤–µ—Ä–æ—è—Ç–Ω–æ, –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Ü–µ–Ω–∑—É—Ä—ã –º–æ–¥–µ–ª–∏ (–Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ)."
                yield format_openai_chunk(warning_msg, model, response_id)
        elif event_type == 'error':
            logger.error(f"STREAMER [ID: {request_id[:8]}]: –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ: {data}")
            yield format_openai_error_chunk(str(data), model, response_id)
            yield format_openai_finish_chunk(model, response_id, reason='stop')
            return  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º

    # –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è _process_lmarena_stream (—Ç.–µ. –ø–æ–ª—É—á–µ–Ω–∏—è [DONE])
    yield format_openai_finish_chunk(model, response_id, reason=finish_reason_to_send)
    logger.info(f"STREAMER [ID: {request_id[:8]}]: –ü–æ—Ç–æ–∫–æ–≤—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω –Ω–æ—Ä–º–∞–ª—å–Ω–æ.")

async def non_stream_response(request_id: str, model: str):
    """–ê–≥—Ä–µ–≥–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–¥–∏–Ω—ã–π JSON-–æ—Ç–≤–µ—Ç OpenAI."""
    response_id = f"chatcmpl-{uuid.uuid4()}"
    logger.info(f"NON-STREAM [ID: {request_id[:8]}]: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.")
    
    full_content = []
    finish_reason = "stop"
    
    async for event_type, data in _process_lmarena_stream(request_id):
        if event_type == 'content':
            full_content.append(data)
        elif event_type == 'finish':
            finish_reason = data
            if data == 'content-filter':
                full_content.append("\n\n–û—Ç–≤–µ—Ç –ø—Ä–µ—Ä–≤–∞–Ω, –≤–µ—Ä–æ—è—Ç–Ω–æ, –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Ü–µ–Ω–∑—É—Ä—ã –º–æ–¥–µ–ª–∏ (–Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ).")
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–¥–µ—Å—å, –∂–¥—ë–º —Å–∏–≥–Ω–∞–ª–∞ [DONE] –æ—Ç –±—Ä–∞—É–∑–µ—Ä–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–æ–Ω–∫–∏
        elif event_type == 'error':
            logger.error(f"NON-STREAM [ID: {request_id[:8]}]: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {data}")
            
            # –£–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–æ–¥—ã –æ—à–∏–±–æ–∫ –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤—ã—Ö –∏ –Ω–µ–ø–æ—Ç–æ–∫–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            status_code = 413 if "–≤–ª–æ–∂–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç" in str(data) else 500

            error_response = {
                "error": {
                    "message": f"[LMArena Bridge Error]: {data}",
                    "type": "bridge_error",
                    "code": "attachment_too_large" if status_code == 413 else "processing_error"
                }
            }
            return Response(content=json.dumps(error_response, ensure_ascii=False), status_code=status_code, media_type="application/json")

    final_content = "".join(full_content)
    response_data = format_openai_non_stream_response(final_content, model, response_id, reason=finish_reason)
    
    logger.info(f"NON-STREAM [ID: {request_id[:8]}]: –ê–≥—Ä–µ–≥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    return Response(content=json.dumps(response_data, ensure_ascii=False), media_type="application/json")

# --- WebSocket-—ç–Ω–¥–ø–æ–∏–Ω—Ç ---
@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç —Å–∫—Ä–∏–ø—Ç–∞ Tampermonkey."""
    global browser_ws, IS_REFRESHING_FOR_VERIFICATION
    await websocket.accept()
    if browser_ws is not None:
        logger.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ Tampermonkey, —Å—Ç–∞—Ä–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–æ.")
    
    # –ù–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ–∑–Ω–∞—á–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω–æ—Å—Ç—å (–∏–ª–∏ –µ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ)
    if IS_REFRESHING_FOR_VERIFICATION:
        logger.info("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–±—Ä–æ—à–µ–Ω–æ.")
        IS_REFRESHING_FOR_VERIFICATION = False
        
    logger.info("‚úÖ –°–∫—Ä–∏–ø—Ç Tampermonkey —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ WebSocket.")
    browser_ws = websocket
    try:
        while True:
            # –û–∂–∏–¥–∞–µ–º –∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–∫—Ä–∏–ø—Ç–∞ Tampermonkey
            message_str = await websocket.receive_text()
            message = json.loads(message_str)
            
            request_id = message.get("request_id")
            data = message.get("data")

            if not request_id or data is None:
                logger.warning(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±—Ä–∞—É–∑–µ—Ä–∞: {message}")
                continue

            # –ü–æ–º–µ—â–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–∞–Ω–∞–ª –æ—Ç–≤–µ—Ç–∞
            if request_id in response_channels:
                await response_channels[request_id].put(data)
            else:
                logger.warning(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {request_id}")

    except WebSocketDisconnect:
        logger.warning("‚ùå –ö–ª–∏–µ–Ω—Ç —Å–∫—Ä–∏–ø—Ç–∞ Tampermonkey –æ—Ç–∫–ª—é—á–∏–ª—Å—è.")
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ WebSocket: {e}", exc_info=True)
    finally:
        browser_ws = None
        # –û—á–∏—â–∞–µ–º –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –∫–∞–Ω–∞–ª—ã –æ—Ç–≤–µ—Ç–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–∞–≤–∏—Å–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
        for queue in response_channels.values():
            await queue.put({"error": "–ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫–ª—é—á–∏–ª—Å—è –≤–æ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏"})
        response_channels.clear()
        logger.info("WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ.")

# --- –°–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å OpenAI API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã ---
@app.get("/v1/models")
async def get_models():
    """–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å OpenAI."""
    if not MODEL_NAME_TO_ID_MAP:
        return JSONResponse(
            status_code=404,
            content={"error": "–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –ø—É—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª 'models.json' –Ω–µ –Ω–∞–π–¥–µ–Ω."}
        )
    
    return {
        "object": "list",
        "data": [
            {
                "id": model_name, 
                "object": "model",
                "created": int(time.time()),
                "owned_by": "LMArenaBridge"
            }
            for model_name in MODEL_NAME_TO_ID_MAP.keys()
        ],
    }

@app.post("/internal/request_model_update")
async def request_model_update():
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –æ—Ç model_updater.py –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ WebSocket,
    —á—Ç–æ–±—ã —Å–∫—Ä–∏–ø—Ç Tampermonkey –æ—Ç–ø—Ä–∞–≤–∏–ª –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    """
    if not browser_ws:
        logger.warning("MODEL UPDATE: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –Ω–æ –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω.")
        raise HTTPException(status_code=503, detail="–ö–ª–∏–µ–Ω—Ç –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω.")
    
    try:
        logger.info("MODEL UPDATE: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ WebSocket...")
        await browser_ws.send_text(json.dumps({"command": "send_page_source"}))
        logger.info("MODEL UPDATE: –ö–æ–º–∞–Ω–¥–∞ 'send_page_source' —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
        return JSONResponse({"status": "success", "message": "–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω."})
    except Exception as e:
        logger.error(f"MODEL UPDATE: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–∞–Ω–¥—ã: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ WebSocket.")

@app.post("/internal/update_available_models")
async def update_available_models_endpoint(request: Request):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç —Å–∫—Ä–∏–ø—Ç–∞ Tampermonkey, –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç available_models.json.
    """
    html_content = await request.body()
    if not html_content:
        logger.warning("–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç HTML-—Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ.")
        return JSONResponse(
            status_code=400,
            content={"status": "error", "message": "HTML-—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ."}
        )
    
    logger.info("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç —Å–∫—Ä–∏–ø—Ç–∞ Tampermonkey, –Ω–∞—á–∞–ª–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...")
    new_models_list = extract_models_from_html(html_content.decode('utf-8'))
    
    if new_models_list:
        save_available_models(new_models_list)
        return JSONResponse({"status": "success", "message": "–§–∞–π–ª –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –æ–±–Ω–æ–≤–ª—ë–Ω."})
    else:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–µ–π –∏–∑ HTML, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–æ–º Tampermonkey.")
        return JSONResponse(
            status_code=400,
            content={"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–µ–π –∏–∑ HTML."}
        )

@app.post("/v1/chat/completions")
async def chat_completions(request: Request):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–∞—Ç–∞.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ OpenAI, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç LMArena,
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á–µ—Ä–µ–∑ WebSocket —Å–∫—Ä–∏–ø—Ç—É Tampermonkey –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–æ—Ç–æ–∫–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.
    """
    global last_activity_time
    last_activity_time = datetime.now()  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    logger.info(f"–ü–æ–ª—É—á–µ–Ω API-–∑–∞–ø—Ä–æ—Å, –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {last_activity_time.strftime('%Y-%m-%d %H:%M:%S')}")

    try:
        openai_req = await request.json()
    except json.JSONDecodeError:
        raise HTTPException(status_code=400, detail="–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ JSON")

    model_name = openai_req.get("model")
    model_info = MODEL_NAME_TO_ID_MAP.get(model_name, {})  # –ö–ª—é—á–µ–≤–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    model_type = model_info.get("type", "text")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—Å—Ç

    # --- –ù–æ–≤–æ–µ: –ª–æ–≥–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏ ---
    if model_type == 'image':
        logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–∏–ø –º–æ–¥–µ–ª–∏ '{model_name}' ‚Äî 'image', –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞.")
        # –î–ª—è –º–æ–¥–µ–ª–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–æ–ª—å—à–µ –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É —á–∞—Ç–∞,
        # —Ç–∞–∫ –∫–∞–∫ _process_lmarena_stream —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
        # –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–µ–ø–µ—Ä—å –Ω–∞—Ç–∏–≤–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—ã–µ –∏ –Ω–µ–ø–æ—Ç–æ–∫–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã.
        pass  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ–±—â–µ–π –ª–æ–≥–∏–∫–æ–π —á–∞—Ç–∞
    # --- –ö–æ–Ω–µ—Ü –ª–æ–≥–∏–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ---

    # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
    load_config()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å–µ—Å—Å–∏–∏
    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ API-–∫–ª—é—á–∞ ---
    api_key = CONFIG.get("api_key")
    if api_key:
        auth_header = request.headers.get('Authorization')
        if not auth_header or not auth_header.startswith('Bearer '):
            raise HTTPException(
                status_code=401,
                detail="API-–∫–ª—é—á –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ Authorization –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'Bearer YOUR_KEY'."
            )
        
        provided_key = auth_header.split(' ')[1]
        if provided_key != api_key:
            raise HTTPException(
                status_code=401,
                detail="–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π API-–∫–ª—é—á."
            )

    # --- –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–æ–Ω–∫–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω–æ—Å—Ç—å ---
    if IS_REFRESHING_FOR_VERIFICATION and not browser_ws:
        raise HTTPException(
            status_code=503,
            detail="–û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω–æ—Å—Ç—å, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
        )

    if not browser_ws:
        raise HTTPException(
            status_code=503,
            detail="–ö–ª–∏–µ–Ω—Ç —Å–∫—Ä–∏–ø—Ç–∞ Tampermonkey –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ LMArena –æ—Ç–∫—Ä—ã—Ç–∞ –∏ —Å–∫—Ä–∏–ø—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω."
        )

    # --- –õ–æ–≥–∏–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å–µ—Å—Å–∏–π ---
    session_id, message_id = None, None
    mode_override, battle_target_override = None, None

    if model_name and model_name in MODEL_ENDPOINT_MAP:
        mapping_entry = MODEL_ENDPOINT_MAP[model_name]
        selected_mapping = None

        if isinstance(mapping_entry, list) and mapping_entry:
            selected_mapping = random.choice(mapping_entry)
            logger.info(f"–î–ª—è –º–æ–¥–µ–ª–∏ '{model_name}' —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤—ã–±—Ä–∞–Ω –æ–¥–∏–Ω –∏–∑ —Å–ø–∏—Å–∫–æ–≤ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π.")
        elif isinstance(mapping_entry, dict):
            selected_mapping = mapping_entry
            logger.info(f"–î–ª—è –º–æ–¥–µ–ª–∏ '{model_name}' –Ω–∞–π–¥–µ–Ω –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç).")
        
        if selected_mapping:
            session_id = selected_mapping.get("session_id")
            message_id = selected_mapping.get("message_id")
            # –ö–ª—é—á–µ–≤–æ–µ: –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–∂–∏–º–µ
            mode_override = selected_mapping.get("mode")  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
            battle_target_override = selected_mapping.get("battle_target")  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
            log_msg = f"–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω Session ID: ...{session_id[-6:] if session_id else 'N/A'}"
            if mode_override:
                log_msg += f" (—Ä–µ–∂–∏–º: {mode_override}"
                if mode_override == 'battle':
                    log_msg += f", —Ü–µ–ª—å: {battle_target_override or 'A'}"
                log_msg += ")"
            logger.info(log_msg)

    # –ï—Å–ª–∏ session_id –≤—Å—ë –µ—â—ë None, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ª–æ–≥–∏–∫–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ—Ç–∫–∞—Ç–∞
    if not session_id:
        if CONFIG.get("use_default_ids_if_mapping_not_found", True):
            session_id = CONFIG.get("session_id")
            message_id = CONFIG.get("message_id")
            # –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞
            mode_override, battle_target_override = None, None
            logger.info(f"–î–ª—è –º–æ–¥–µ–ª–∏ '{model_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω—ã–π Session ID –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ...{session_id[-6:] if session_id else 'N/A'}")
        else:
            logger.error(f"–ú–æ–¥–µ–ª—å '{model_name}' –Ω–µ –∏–º–µ–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤ 'model_endpoint_map.json', –∏ –æ—Ç–∫–∞—Ç –∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫–ª—é—á—ë–Ω.")
            raise HTTPException(
                status_code=400,
                detail=f"–î–ª—è –º–æ–¥–µ–ª–∏ '{model_name}' –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏. –î–æ–±–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤ 'model_endpoint_map.json' –∏–ª–∏ –≤–∫–ª—é—á–∏—Ç–µ 'use_default_ids_if_mapping_not_found' –≤ 'config.jsonc'."
            )

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏ ---
    if not session_id or not message_id or "YOUR_" in session_id or "YOUR_" in message_id:
        raise HTTPException(
            status_code=400,
            detail="–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Å–µ—Å—Å–∏–∏ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ 'model_endpoint_map.json' –∏ 'config.jsonc' –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ `id_updater.py` –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."
        )

    if not model_name or model_name not in MODEL_NAME_TO_ID_MAP:
        logger.warning(f"–ó–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å '{model_name}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ models.json, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–æ–¥–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")

    request_id = str(uuid.uuid4())
    response_channels[request_id] = asyncio.Queue()
    logger.info(f"API CALL [ID: {request_id[:8]}]: –°–æ–∑–¥–∞–Ω –∫–∞–Ω–∞–ª –æ—Ç–≤–µ—Ç–∞.")

    try:
        # --- –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è –∑–∞–≥—Ä—É–∑–∫—É –≤ —Ñ–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ) ---
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –≤–ª–æ–∂–µ–Ω–∏—è –¥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±—Ä–∞—É–∑–µ—Ä–æ–º. –ü—Ä–∏ –æ—à–∏–±–∫–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É.
        messages_to_process = openai_req.get("messages", [])
        for message in messages_to_process:
            content = message.get("content")
            if isinstance(content, list):
                for i, part in enumerate(content):
                    if part.get("type") == "image_url" and CONFIG.get("file_bed_enabled"):
                        image_url_data = part.get("image_url", {})
                        base64_url = image_url_data.get("url")
                        original_filename = image_url_data.get("detail")
                        
                        if not (base64_url and base64_url.startswith("data:")):
                            raise ValueError(f"–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {base64_url[:100] if base64_url else 'None'}")

                        upload_url = CONFIG.get("file_bed_upload_url")
                        if not upload_url:
                            raise ValueError("–§–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤–∫–ª—é—á–µ–Ω–æ, –Ω–æ 'file_bed_upload_url' –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
                        
                        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª—ç—à–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
                        upload_url = upload_url.replace('\\/', '/')

                        api_key = CONFIG.get("file_bed_api_key")
                        file_name = original_filename or f"image_{uuid.uuid4()}.png"
                        
                        logger.info(f"–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: –∑–∞–≥—Ä—É–∑–∫–∞ '{file_name}'...")
                        uploaded_filename, error_message = await upload_to_file_bed(file_name, base64_url, upload_url, api_key)

                        if error_message:
                            raise IOError(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —Ñ–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {error_message}")
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω–µ—á–Ω—ã–π URL –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞ URL –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                        url_prefix = upload_url.rsplit('/', 1)[0]
                        final_url = f"{url_prefix}/uploads/{uploaded_filename}"
                        
                        part["image_url"]["url"] = final_url
                        logger.info(f"URL –≤–ª–æ–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω—ë–Ω –Ω–∞: {final_url}")

        # 1. –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ (–≤–ª–æ–∂–µ–Ω–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã)
        lmarena_payload = await convert_openai_to_lmarena_payload(
            openai_req,
            session_id,
            message_id,
            mode_override=mode_override,
            battle_target_override=battle_target_override
        )
        
        # –ö–ª—é—á–µ–≤–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: –µ—Å–ª–∏ –º–æ–¥–µ–ª—å ‚Äî –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —ç—Ç–æ —Å–∫—Ä–∏–ø—Ç—É Tampermonkey
        if model_type == 'image':
            lmarena_payload['is_image_request'] = True
        
        # 2. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –±—Ä–∞—É–∑–µ—Ä
        message_to_browser = {
            "request_id": request_id,
            "payload": lmarena_payload
        }
        
        # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ WebSocket
        logger.info(f"API CALL [ID: {request_id[:8]}]: –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç—É Tampermonkey —á–µ—Ä–µ–∑ WebSocket.")
        await browser_ws.send_text(json.dumps(message_to_browser))

        # 4. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ stream
        is_stream = openai_req.get("stream", False)

        if is_stream:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            return StreamingResponse(
                stream_generator(request_id, model_name or "default_model"),
                media_type="text/event-stream"
            )
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–ø–æ—Ç–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            return await non_stream_response(request_id, model_name or "default_model")
    except (ValueError, IOError) as e:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–ª–æ–∂–µ–Ω–∏–π
        logger.error(f"API CALL [ID: {request_id[:8]}]: –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–ª–æ–∂–µ–Ω–∏–π: {e}")
        if request_id in response_channels:
            del response_channels[request_id]
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON-–æ—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π
        return JSONResponse(
            status_code=500,
            content={"error": {"message": f"[LMArena Bridge Error] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–ª–æ–∂–µ–Ω–∏–π: {e}", "type": "attachment_error"}}
        )
    except Exception as e:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
        if request_id in response_channels:
            del response_channels[request_id]
        logger.error(f"API CALL [ID: {request_id[:8]}]: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}", exc_info=True)
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON
        return JSONResponse(
            status_code=500,
            content={"error": {"message": str(e), "type": "internal_server_error"}}
        )

# --- –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç ---
@app.post("/internal/start_id_capture")
async def start_id_capture():
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç id_updater.py –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ WebSocket
    –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–∞ –∑–∞—Ö–≤–∞—Ç–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤ —Å–∫—Ä–∏–ø—Ç–µ Tampermonkey.
    """
    if not browser_ws:
        logger.warning("ID CAPTURE: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é, –Ω–æ –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω.")
        raise HTTPException(status_code=503, detail="–ö–ª–∏–µ–Ω—Ç –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω.")
    
    try:
        logger.info("ID CAPTURE: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é, –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ WebSocket...")
        await browser_ws.send_text(json.dumps({"command": "activate_id_capture"}))
        logger.info("ID CAPTURE: –ö–æ–º–∞–Ω–¥–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
        return JSONResponse({"status": "success", "message": "–ö–æ–º–∞–Ω–¥–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞."})
    except Exception as e:
        logger.error(f"ID CAPTURE: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–∞–Ω–¥—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ WebSocket.")

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã ---
if __name__ == "__main__":
    # –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å—á–∏—Ç—ã–≤–∞—Ç—å –ø–æ—Ä—Ç –∏–∑ config.jsonc, –∑–¥–µ—Å—å –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω
    api_port = 5102
    logger.info(f"üöÄ LMArena Bridge v2.0 API-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    logger.info(f"   - –ê–¥—Ä–µ—Å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: http://127.0.0.1:{api_port}")
    logger.info(f"   - WebSocket-—ç–Ω–¥–ø–æ–∏–Ω—Ç: ws://127.0.0.1:{api_port}/ws")
    
    uvicorn.run(app, host="0.0.0.0", port=api_port)