# id_updater.py
#
# –≠—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π HTTP-—Å–µ—Ä–≤–µ—Ä, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏
# –æ—Ç —Å–∫—Ä–∏–ø—Ç–∞ Tampermonkey –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ä–µ–∂–∏–º–∞
# (DirectChat –∏–ª–∏ Battle) –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª–µ config.jsonc.

import http.server
import socketserver
import json
import re
import threading
import os
import requests

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
HOST = "127.0.0.1"
PORT = 5103
CONFIG_PATH = 'config.jsonc'

def read_config():
    """–ß–∏—Ç–∞–µ—Ç –∏ –ø–∞—Ä—Å–∏—Ç —Ñ–∞–π–ª config.jsonc, —É–¥–∞–ª—è—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞."""
    if not os.path.exists(CONFIG_PATH):
        print(f"‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ '{CONFIG_PATH}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return None
    try:
        with open(CONFIG_PATH, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        # –ë–æ–ª–µ–µ –Ω–∞–¥—ë–∂–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –ø–æ—Å—Ç—Ä–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è '//' –≤ URL
        no_comments_lines = []
        in_block_comment = False
        for line in lines:
            stripped_line = line.strip()
            if in_block_comment:
                if '*/' in stripped_line:
                    in_block_comment = False
                    line = stripped_line.split('*/', 1)[1]
                else:
                    continue
            
            if '/*' in line and not in_block_comment:
                before_comment, _, after_comment = line.partition('/*')
                if '*/' in after_comment:
                    _, _, after_block = after_comment.partition('*/')
                    line = before_comment + after_block
                else:
                    line = before_comment
                    in_block_comment = True

            if line.strip().startswith('//'):
                continue
            
            no_comments_lines.append(line)

        json_content = "".join(no_comments_lines)
        return json.loads(json_content)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–ª–∏ —Ä–∞–∑–±–æ—Ä–µ '{CONFIG_PATH}': {e}")
        return None

def save_config_value(key, value):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ config.jsonc, —Å–æ—Ö—Ä–∞–Ω—è—è –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.
    –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∏–ª–∏ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.
    """
    try:
        with open(CONFIG_PATH, 'r', encoding='utf-8') as f:
            content = f.read()

        # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–∞–º–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è
        # –ù–∞—Ö–æ–¥–∏—Ç "key": "–ª—é–±–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ" –∏ –∑–∞–º–µ–Ω—è–µ—Ç "–ª—é–±–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
        pattern = re.compile(rf'("{key}"\s*:\s*")[^"]*(")')
        new_content, count = pattern.subn(rf'\g<1>{value}\g<2>', content, 1)

        if count == 0:
            print(f"ü§î –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–ª—é—á '{key}' –≤ '{CONFIG_PATH}'.")
            return False

        with open(CONFIG_PATH, 'w', encoding='utf-8') as f:
            f.write(new_content)
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ '{CONFIG_PATH}': {e}")
        return False

def save_session_ids(session_id, message_id):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Å–µ—Å—Å–∏–∏ –≤ —Ñ–∞–π–ª–µ config.jsonc."""
    print(f"\nüìù –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø–∏—Å–∞—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –≤ '{CONFIG_PATH}'...")
    res1 = save_config_value("session_id", session_id)
    res2 = save_config_value("message_id", message_id)
    if res1 and res2:
        print(f"‚úÖ –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
        print(f"   - session_id: {session_id}")
        print(f"   - message_id: {message_id}")
    else:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –≤—ã—à–µ.")

class RequestHandler(http.server.SimpleHTTPRequestHandler):
    def _send_cors_headers(self):
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')

    def do_OPTIONS(self):
        self.send_response(204)
        self._send_cors_headers()
        self.end_headers()

    def do_POST(self):
        if self.path == '/update':
            try:
                content_length = int(self.headers['Content-Length'])
                post_data = self.rfile.read(content_length)
                data = json.loads(post_data)

                session_id = data.get('sessionId')
                message_id = data.get('messageId')

                if session_id and message_id:
                    print("\n" + "=" * 50)
                    print("üéâ –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞!")
                    print(f"  - Session ID: {session_id}")
                    print(f"  - Message ID: {message_id}")
                    print("=" * 50)

                    save_session_ids(session_id, message_id)

                    self.send_response(200)
                    self._send_cors_headers()
                    self.end_headers()
                    self.wfile.write(b'{"status": "success"}')

                    print("\n–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä–æ–µ—Ç—Å—è —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É.")
                    threading.Thread(target=self.server.shutdown).start()

                else:
                    self.send_response(400, "Bad Request")
                    self._send_cors_headers()
                    self.end_headers()
                    self.wfile.write(b'{"error": "Missing sessionId or messageId"}')
            except Exception as e:
                self.send_response(500, "Internal Server Error")
                self._send_cors_headers()
                self.end_headers()
                self.wfile.write(f'{{"error": "Internal server error: {e}"}}'.encode('utf-8'))
        else:
            self.send_response(404, "Not Found")
            self._send_cors_headers()
            self.end_headers()

    def log_message(self, format, *args):
        return

def run_server():
    with socketserver.TCPServer((HOST, PORT), RequestHandler) as httpd:
        print("\n" + "="*50)
        print("  üöÄ –°–ª—É—à–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å–µ—Å—Å–∏–∏ –∑–∞–ø—É—â–µ–Ω")
        print(f"  - –ê–¥—Ä–µ—Å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: http://{HOST}:{PORT}")
        print("  - –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–π—Ç–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π LMArena –≤ –±—Ä–∞—É–∑–µ—Ä–µ, —á—Ç–æ–±—ã –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –∑–∞—Ö–≤–∞—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤.")
        print("  - –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞ —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∏—Ç —Ä–∞–±–æ—Ç—É.")
        print("="*50)
        httpd.serve_forever()

def notify_api_server():
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –≥–ª–∞–≤–Ω—ã–π API-—Å–µ—Ä–≤–µ—Ä –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞—Ö–≤–∞—Ç–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤."""
    api_server_url = "http://127.0.0.1:5102/internal/start_id_capture"
    try:
        response = requests.post(api_server_url, timeout=3)
        if response.status_code == 200:
            print("‚úÖ –ì–ª–∞–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–≤–µ–¥–æ–º–ª—ë–Ω –æ –∑–∞–ø—É—Å–∫–µ —Ä–µ–∂–∏–º–∞ –∑–∞—Ö–≤–∞—Ç–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤.")
            return True
        else:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –≥–ª–∞–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä, –∫–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {response.status_code}.")
            print(f"   - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {response.text}")
            return False
    except requests.ConnectionError:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É API-—Å–µ—Ä–≤–µ—Ä—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ api_server.py –∑–∞–ø—É—â–µ–Ω.")
        return False
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return False

if __name__ == "__main__":
    config = read_config()
    if not config:
        exit(1)

    # --- –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    last_mode = config.get("id_updater_last_mode", "direct_chat")
    mode_map = {"a": "direct_chat", "b": "battle"}
    
    prompt = f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º [a: DirectChat, b: Battle] (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {last_mode}): "
    choice = input(prompt).lower().strip()

    if not choice:
        mode = last_mode
    else:
        mode = mode_map.get(choice)
        if not mode:
            print(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –≤–≤–æ–¥, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {last_mode}")
            mode = last_mode

    save_config_value("id_updater_last_mode", mode)
    print(f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {mode.upper()}")
    
    if mode == 'battle':
        last_target = config.get("id_updater_battle_target", "A")
        target_prompt = f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è [A (–¥–ª—è –º–æ–¥–µ–ª–∏ search –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ A) –∏–ª–∏ B] (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {last_target}): "
        target_choice = input(target_prompt).upper().strip()

        if not target_choice:
            target = last_target
        elif target_choice in ["A", "B"]:
            target = target_choice
        else:
            print(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –≤–≤–æ–¥, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {last_target}")
            target = last_target
        
        save_config_value("id_updater_battle_target", target)
        print(f"–¶–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ Battle: Assistant {target}")
        print("–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –≤—ã–±–æ—Ä–∞ A –∏–ª–∏ B, –∑–∞—Ö–≤–∞—á–µ–Ω–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω—ã–µ session_id –∏ message_id.")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≥–ª–∞–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–ª—É—à–∞—Ç–µ–ª—è
    if notify_api_server():
        run_server()
        print("–°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")
    else:
        print("\n–ü—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø—Ä–µ—Ä–≤–∞–Ω –∏–∑-–∑–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–≤–µ–¥–æ–º–∏—Ç—å –≥–ª–∞–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä.")