// ==UserScript==
// @name         –ú–æ—Å—Ç API LMArena
// @namespace    http://tampermonkey.net/
// @version      2.5
// @description  –°–æ–µ–¥–∏–Ω—è–µ—Ç LMArena —Å –ª–æ–∫–∞–ª—å–Ω—ã–º API-—Å–µ—Ä–≤–µ—Ä–æ–º —á–µ—Ä–µ–∑ WebSocket –¥–ª—è —É–ø—Ä–æ—â—ë–Ω–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏.
// @author       Lianues
// @match        https://lmarena.ai/*
// @match        https://*.lmarena.ai/*
// @icon         https://www.google.com/s2/favicons?sz=64&domain=lmarena.ai
// @grant        none
// @run-at       document-end
// ==/UserScript==

(function () {
    'use strict';

    // --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
    const SERVER_URL = "ws://localhost:5102/ws"; // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ—Ä—Ç—É –≤ api_server.py
    let socket;
    let isCaptureModeActive = false; // –§–ª–∞–≥ —Ä–µ–∂–∏–º–∞ –∑–∞—Ö–≤–∞—Ç–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤

    // --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---
    function connect() {
        console.log(`[–ú–æ—Å—Ç API] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º: ${SERVER_URL}...`);
        socket = new WebSocket(SERVER_URL);

        socket.onopen = () => {
            console.log("[–ú–æ—Å—Ç API] ‚úÖ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.");
            document.title = "‚úÖ " + document.title;
        };

        socket.onmessage = async (event) => {
            try {
                const message = JSON.parse(event.data);

                // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π, –∞ –Ω–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º —á–∞—Ç–∞
                if (message.command) {
                    console.log(`[–ú–æ—Å—Ç API] ‚¨áÔ∏è –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: ${message.command}`);
                    if (message.command === 'refresh' || message.command === 'reconnect') {
                        console.log(`[–ú–æ—Å—Ç API] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ '${message.command}', –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...`);
                        location.reload();
                    } else if (message.command === 'activate_id_capture') {
                        console.log("[–ú–æ—Å—Ç API] ‚úÖ –†–µ–∂–∏–º –∑–∞—Ö–≤–∞—Ç–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é 'Retry' –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.");
                        isCaptureModeActive = true;
                        // –í–∏–∑—É–∞–ª—å–Ω–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        document.title = "üéØ " + document.title;
                    } else if (message.command === 'send_page_source') {
                        console.log("[–ú–æ—Å—Ç API] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∫–∞...");
                        sendPageSource();
                    }
                    return;
                }

                const { request_id, payload } = message;

                if (!request_id || !payload) {
                    console.error("[–ú–æ—Å—Ç API] –ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", message);
                    return;
                }
                
                console.log(`[–ú–æ—Å—Ç API] ‚¨áÔ∏è –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å —á–∞—Ç–∞ ${request_id.substring(0, 8)}. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é fetch-–∑–∞–ø—Ä–æ—Å–∞.`);
                await executeFetchAndStreamBack(request_id, payload);

            } catch (error) {
                console.error("[–ú–æ—Å—Ç API] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", error);
            }
        };

        socket.onclose = () => {
            console.warn("[–ú–æ—Å—Ç API] üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...");
            if (document.title.startsWith("‚úÖ ")) {
                document.title = document.title.substring(2);
            }
            setTimeout(connect, 5000);
        };

        socket.onerror = (error) => {
            console.error("[–ú–æ—Å—Ç API] ‚ùå –û—à–∏–±–∫–∞ WebSocket:", error);
            socket.close(); // –ó–∞–ø—É—Å–∫–∞–µ—Ç –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ onclose
        };
    }

    async function executeFetchAndStreamBack(requestId, payload) {
        console.log(`[–ú–æ—Å—Ç API] –¢–µ–∫—É—â–∏–π –¥–æ–º–µ–Ω: ${window.location.hostname}`);
        const { is_image_request, message_templates, target_model_id, session_id, message_id } = payload;

        // --- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏, –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ ---
        if (!session_id || !message_id) {
            const errorMsg = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏ (session_id –∏–ª–∏ message_id) –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø—É—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç `id_updater.py` –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.";
            console.error(`[–ú–æ—Å—Ç API] ${errorMsg}`);
            sendToServer(requestId, { error: errorMsg });
            sendToServer(requestId, "[DONE]");
            return;
        }

        // URL –æ–¥–∏–Ω–∞–∫–æ–≤ –¥–ª—è —á–∞—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        const apiUrl = `/nextjs-api/stream/retry-evaluation-session-message/${session_id}/messages/${message_id}`;
        const httpMethod = 'PUT';
        
        console.log(`[–ú–æ—Å—Ç API] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è API-—ç–Ω–¥–ø–æ–∏–Ω—Ç: ${apiUrl}`);
        
        const newMessages = [];
        let lastMsgIdInChain = null;

        if (!message_templates || message_templates.length === 0) {
            const errorMsg = "–°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø—É—Å—Ç.";
            console.error(`[–ú–æ—Å—Ç API] ${errorMsg}`);
            sendToServer(requestId, { error: errorMsg });
            sendToServer(requestId, "[DONE]");
            return;
        }

        // –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ —Ü–∏–∫–ª–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞ –¥–ª—è —á–∞—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —Ç–∞–∫ –∫–∞–∫ —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ message_templates
        for (let i = 0; i < message_templates.length; i++) {
            const template = message_templates[i];
            const currentMsgId = crypto.randomUUID();
            const parentIds = lastMsgIdInChain ? [lastMsgIdInChain] : [];
            
            // –î–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å –≤—Å–µ–≥–¥–∞ 'success'
            // –ò–Ω–∞—á–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å 'pending'
            const status = is_image_request ? 'success' : ((i === message_templates.length - 1) ? 'pending' : 'success');

            newMessages.push({
                role: template.role,
                content: template.content,
                id: currentMsgId,
                evaluationId: null,
                evaluationSessionId: session_id,
                parentMessageIds: parentIds,
                experimental_attachments: Array.isArray(template.attachments) ? template.attachments : [],
                failureReason: null,
                metadata: null,
                participantPosition: template.participantPosition || "a",
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString(),
                status: status,
            });
            lastMsgIdInChain = currentMsgId;
        }

        const body = {
            messages: newMessages,
            modelId: target_model_id,
        };

        console.log("[–ú–æ—Å—Ç API] –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ API LMArena:", JSON.stringify(body, null, 2));

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ fetch –∑–Ω–∞–ª, —á—Ç–æ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç —Å–∫—Ä–∏–ø—Ç–∞
        window.isApiBridgeRequest = true;
        try {
            const response = await fetch(apiUrl, {
                method: httpMethod,
                headers: {
                    'Content-Type': 'text/plain;charset=UTF-8', // LMArena –∏—Å–ø–æ–ª—å–∑—É–µ—Ç text/plain
                    'Accept': '*/*',
                },
                body: JSON.stringify(body),
                credentials: 'include' // –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–∫–ª—é—á–∏—Ç—å cookies
            });

            if (!response.ok || !response.body) {
                const errorBody = await response.text();
                throw new Error(`–°–µ—Ç–µ–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –°—Ç–∞—Ç—É—Å: ${response.status}. –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: ${errorBody}`);
            }

            const reader = response.body.getReader();
            const decoder = new TextDecoder();

            while (true) {
                const { value, done } = await reader.read();
                if (done) {
                    console.log(`[–ú–æ—Å—Ç API] ‚úÖ –ü–æ—Ç–æ–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ ${requestId.substring(0, 8)} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω.`);
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º [DONE] —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
                    sendToServer(requestId, "[DONE]");
                    break;
                }
                const chunk = decoder.decode(value);
                // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                sendToServer(requestId, chunk);
            }

        } catch (error) {
            console.error(`[–ú–æ—Å—Ç API] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ fetch –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ ${requestId.substring(0, 8)}:`, error);
            // –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –±–µ–∑ [DONE]
            sendToServer(requestId, { error: error.message });
        } finally {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            window.isApiBridgeRequest = false;
        }
    }

    function sendToServer(requestId, data) {
        if (socket && socket.readyState === WebSocket.OPEN) {
            const message = {
                request_id: requestId,
                data: data
            };
            socket.send(JSON.stringify(message));
        } else {
            console.error("[–ú–æ—Å—Ç API] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–æ.");
        }
    }

    // --- –ü–µ—Ä–µ—Ö–≤–∞—Ç —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ ---
    const originalFetch = window.fetch;
    window.fetch = function(...args) {
        const urlArg = args[0];
        let urlString = '';

        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ URL –≤—Å–µ–≥–¥–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
        if (urlArg instanceof Request) {
            urlString = urlArg.url;
        } else if (urlArg instanceof URL) {
            urlString = urlArg.href;
        } else if (typeof urlArg === 'string') {
            urlString = urlArg;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π
        if (urlString) {
            const match = urlString.match(/\/nextjs-api\/stream\/retry-evaluation-session-message\/([a-f0-9-]+)\/messages\/([a-f0-9-]+)/);

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ –æ—Ç –º–æ—Å—Ç–∞ API –∏ —Ä–µ–∂–∏–º –∑–∞—Ö–≤–∞—Ç–∞ –∞–∫—Ç–∏–≤–µ–Ω
            if (match && !window.isApiBridgeRequest && isCaptureModeActive) {
                const sessionId = match[1];
                const messageId = match[2];
                console.log(`[–ü–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –ú–æ—Å—Ç–∞ API] üéØ –ó–∞—Ö–≤–∞—á–µ–Ω—ã –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ! –û—Ç–ø—Ä–∞–≤–∫–∞...`);

                // –û—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –∑–∞—Ö–≤–∞—Ç–∞, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
                isCaptureModeActive = false;
                if (document.title.startsWith("üéØ ")) {
                    document.title = document.title.substring(2);
                }

                // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—Ö–≤–∞—á–µ–Ω–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç id_updater.py
                fetch('http://127.0.0.1:5103/update', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ sessionId, messageId })
                })
                .then(response => {
                    if (!response.ok) throw new Error(`–°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª —Å—Ç–∞—Ç—É—Å–æ–º: ${response.status}`);
                    console.log(`[–ú–æ—Å—Ç API] ‚úÖ –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –†–µ–∂–∏–º –∑–∞—Ö–≤–∞—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á—ë–Ω.`);
                })
                .catch(err => {
                    console.error('[–ú–æ—Å—Ç API] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤:', err.message);
                    // –†–µ–∂–∏–º –∑–∞—Ö–≤–∞—Ç–∞ –æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
                });
            }
        }

        // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é fetch, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        return originalFetch.apply(this, args);
    };

    // --- –û—Ç–ø—Ä–∞–≤–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
    async function sendPageSource() {
        try {
            const htmlContent = document.documentElement.outerHTML;
            await fetch('http://localhost:5102/internal/update_available_models', { // –Ω–æ–≤–∞—è –∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞
                method: 'POST',
                headers: {
                    'Content-Type': 'text/html; charset=utf-8'
                },
                body: htmlContent
            });
            console.log("[–ú–æ—Å—Ç API] –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.");
        } catch (e) {
            console.error("[–ú–æ—Å—Ç API] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:", e);
        }
    }

    // --- –ó–∞–ø—É—Å–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ---
    console.log("========================================");
    console.log("  –ú–æ—Å—Ç API LMArena v2.5 –∑–∞–ø—É—â–µ–Ω.");
    console.log("  - –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —á–∞—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫ ws://localhost:5102");
    console.log("  - –ó–∞—Ö–≤–∞—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ http://localhost:5103");
    console.log("========================================");
    
    connect(); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ

})();